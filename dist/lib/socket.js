"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const os = tslib_1.__importStar(require("os"));
var Socket;
(function (Socket) {
    /**
     * Wrapper for setting up the Socket.
     *
     * @author V. H.
     * @date 2019-05-12
     * @export
     * @param {SocketIO.Server} io
     * @param {Classes.Panel} panel
     * @returns {SocketIO.Namespace}
     */
    function setup(io, panel) {
        let admin = io.of("/admin"), login = false, ladm;
        panel.on("_debug", async (...data) => {
            if (ladm)
                ladm.emit("_debug", ...data);
        });
        panel.serv.on("_debug", async (...data) => {
            if (ladm)
                ladm.emit("_s_debug", ...data);
        });
        panel.stater.on("snap", async (reg) => {
            if (ladm)
                ladm.emit("snap", reg);
        });
        if (panel.refresh) {
            let ends = new Set([
                ".htm",
                ".html",
                ".htmx",
                ".htmlx",
                ".js",
                ".xjs",
                ".css",
                ".cssx"
            ]);
            fs.watch(path.join(panel.serv.opts.serveDir, panel.serv.opts.public), {
                recursive: true
            }, (evt, file) => {
                if (panel.refresh && Array.from(ends.values()).some(end => file.endsWith(end))) {
                    panel._debug("Refreshing...");
                    admin.emit("refresh");
                }
            });
        }
        admin.on("connect", async (socket) => {
            panel._debug(socket.id + " connected.");
            socket.once("disconnecting", async (reason) => {
                panel._debug(socket.id + " disconnecting  " + reason);
                login = false;
            });
            if (!login) {
                socket.join("admin", async (err) => {
                    if (!err) {
                        socket.emit("_debug", panel._debuglog);
                        socket.emit("_s_debug", panel.serv._debuglog);
                        socket.emit("cli", panel._rllog);
                        for (let snap of panel.stater.samples) {
                            socket.emit("snap", snap);
                        }
                        socket.emit("joined", "admin");
                        panel._debug(`${socket.id} is admin.`);
                        login = true;
                        ladm = socket;
                        socket.emit("stat", "arch", os.arch());
                        socket.emit("stat", "cpus", os.cpus().length);
                        socket.emit("stat", "endian", os.endianness());
                        socket.emit("stat", "platform", os.platform());
                        socket.emit("stat", "release", os.release());
                        socket.emit("stat", "type", os.type());
                        socket.emit("stat", "version", process.version);
                        let prev1 = process.cpuUsage();
                        async function tick() {
                            let mem = process.memoryUsage();
                            prev1 = process.cpuUsage(prev1);
                            socket.emit("stat", "freemem", Math.round((os.freemem() / 1024 / 1024 / 1024) * 100) / 100);
                            socket.emit("stat", "totalmem", Math.round((os.totalmem() / 1024 / 1024 / 1024) * 100) / 100);
                            socket.emit("stat", "priority", os.getPriority());
                            socket.emit("stat", "home", os.homedir());
                            socket.emit("stat", "host", os.hostname());
                            socket.emit("stat", "tmp", os.tmpdir());
                            socket.emit("stat", "up", Math.round(os.uptime() / 6) / 10);
                            socket.emit("stat", "pup", Math.round(process.uptime() / 6) / 10);
                            socket.emit("stat", "cpuus", process.cpuUsage().user / 1000); //micro -> milli
                            socket.emit("stat", "cpuusp", prev1.user / 1000);
                            socket.emit("stat", "cpusy", process.cpuUsage().system / 1000);
                            socket.emit("stat", "cpusyp", prev1.system / 1000);
                            socket.emit("stat", "cwd", process.cwd());
                            socket.emit("stat", "rss", Math.round(100 * mem.rss / 1024 / 1024) / 100);
                            socket.emit("stat", "total1", Math.round(100 * mem.heapTotal / 1024 / 1024) / 100);
                            socket.emit("stat", "used1", Math.round(100 * mem.heapUsed / 1024 / 1024) / 100);
                            socket.emit("stat", "ext", Math.round(100 * mem.external / 1024 / 1024) / 100);
                            socket.emit("stat", "title", process.title);
                            socket.emit("stat", "port", process.debugPort);
                            return tick;
                        } //tick
                        setInterval(await tick(), panel.custping);
                    }
                });
                socket.on("error", async (err) => {
                    panel._debug(err);
                });
                socket.on("command", async (name, ...params) => {
                    params = params.map(param => param === "$panel$" ? panel : param);
                    panel._debug(`Command:  ${name} ${params.slice(0, params.length - 1).join(' ')}  -->`);
                    let out = await panel.cmds.find(cmd => cmd.name === name).body(...params);
                    panel._debug(`  ${out}`);
                    params[params.length - 1](out);
                });
                socket.on("cli", async (comm) => panel.rl.write(comm + os.EOL));
            }
            else {
                socket.disconnect(true);
            }
        });
        return admin;
    } //setup
    Socket.setup = setup;
})(Socket = exports.Socket || (exports.Socket = {})); //Socket
exports.default = Socket;
//# sourceMappingURL=data:application/json;base64,