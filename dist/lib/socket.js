"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Socket;
(function (Socket) {
    function setup(io, panel) {
        let admin = io.of("/admin"), login = false, ladm;
        panel.on("_debug", (...data) => {
            if (ladm)
                ladm.emit("_debug", ...data);
        });
        panel.serv.on("_debug", (...data) => {
            if (ladm)
                ladm.emit("_s_debug", ...data);
        });
        admin.on("connect", socket => {
            panel._debug(socket.id + " connected.");
            socket.once("disconnecting", reason => {
                panel._debug(socket.id + " disconnecting  " + reason);
                login = false;
            });
            if (!login) {
                socket.join("admin", err => {
                    if (!err) {
                        socket.emit("joined", "admin");
                        panel._debug(`${socket.id} is admin.`);
                        login = true;
                        ladm = socket;
                    }
                });
                socket.on("error", err => {
                    panel._debug(err);
                });
                socket.on("command", async (name, ...params) => {
                    params = params.map(param => param === "$panel$" ? panel : param);
                    panel._debug(`Command:  ${name} ${params.slice(0, params.length - 1).join(' ')}  -->`);
                    let out = await panel.cmds.find(cmd => cmd.name === name).body(...params);
                    panel._debug(`  ${out}`);
                    params[params.length - 1](out);
                });
            }
            else {
                socket.disconnect(true);
            }
        });
        return admin;
    } //setup
    Socket.setup = setup;
})(Socket = exports.Socket || (exports.Socket = {})); //Socket
exports.default = Socket;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3NvY2tldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBSWIsSUFBYyxNQUFNLENBZ0RuQjtBQWhERCxXQUFjLE1BQU07SUFFbkIsU0FBZ0IsS0FBSyxDQUFDLEVBQW1CLEVBQUUsS0FBb0I7UUFDOUQsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFDMUIsS0FBSyxHQUFZLEtBQUssRUFDdEIsSUFBcUIsQ0FBQztRQUV2QixLQUFLLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsSUFBVyxFQUFFLEVBQUU7WUFDckMsSUFBSSxJQUFJO2dCQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLElBQVcsRUFBRSxFQUFFO1lBQzFDLElBQUksSUFBSTtnQkFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBRUgsS0FBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDNUIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLGFBQWEsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxFQUFFO2dCQUNyQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLENBQUM7Z0JBQ3RELEtBQUssR0FBRyxLQUFLLENBQUM7WUFDZixDQUFDLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ1gsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUU7b0JBQzFCLElBQUksQ0FBQyxHQUFHLEVBQUU7d0JBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7d0JBQy9CLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQzt3QkFDdkMsS0FBSyxHQUFHLElBQUksQ0FBQzt3QkFDYixJQUFJLEdBQUcsTUFBTSxDQUFDO3FCQUNkO2dCQUNGLENBQUMsQ0FBQyxDQUFDO2dCQUNILE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFO29CQUN4QixLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixDQUFDLENBQUMsQ0FBQztnQkFDSCxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxFQUFFLEVBQUU7b0JBQzlDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDbEUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLElBQUksSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3ZGLElBQUksR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO29CQUMxRSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQztvQkFDekIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2hDLENBQUMsQ0FBQyxDQUFDO2FBQ0g7aUJBQU07Z0JBQ04sTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN4QjtRQUNGLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDLENBQUMsT0FBTztJQTVDTyxZQUFLLFFBNENwQixDQUFBO0FBRUYsQ0FBQyxFQWhEYSxNQUFNLEdBQU4sY0FBTSxLQUFOLGNBQU0sUUFnRG5CLENBQUMsUUFBUTtBQUVWLGtCQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IENsYXNzZXMgZnJvbSAnLi9DbGFzc2VzJztcclxuXHJcbmV4cG9ydCBtb2R1bGUgU29ja2V0IHtcclxuXHJcblx0ZXhwb3J0IGZ1bmN0aW9uIHNldHVwKGlvOiBTb2NrZXRJTy5TZXJ2ZXIsIHBhbmVsOiBDbGFzc2VzLlBhbmVsKSB7XHJcblx0XHRsZXQgYWRtaW4gPSBpby5vZihcIi9hZG1pblwiKSxcclxuXHRcdFx0bG9naW46IGJvb2xlYW4gPSBmYWxzZSxcclxuXHRcdFx0bGFkbTogU29ja2V0SU8uU29ja2V0O1xyXG5cclxuXHRcdHBhbmVsLm9uKFwiX2RlYnVnXCIsICguLi5kYXRhOiBhbnlbXSkgPT4ge1xyXG5cdFx0XHRpZiAobGFkbSkgbGFkbS5lbWl0KFwiX2RlYnVnXCIsIC4uLmRhdGEpO1xyXG5cdFx0fSk7XHJcblx0XHRwYW5lbC5zZXJ2Lm9uKFwiX2RlYnVnXCIsICguLi5kYXRhOiBhbnlbXSkgPT4ge1xyXG5cdFx0XHRpZiAobGFkbSkgbGFkbS5lbWl0KFwiX3NfZGVidWdcIiwgLi4uZGF0YSk7XHJcblx0XHR9KTtcclxuXHRcdFxyXG5cdFx0YWRtaW4ub24oXCJjb25uZWN0XCIsIHNvY2tldCA9PiB7XHJcblx0XHRcdHBhbmVsLl9kZWJ1Zyhzb2NrZXQuaWQgKyBcIiBjb25uZWN0ZWQuXCIpO1xyXG5cdFx0XHRzb2NrZXQub25jZShcImRpc2Nvbm5lY3RpbmdcIiwgcmVhc29uID0+IHtcclxuXHRcdFx0XHRwYW5lbC5fZGVidWcoc29ja2V0LmlkICsgXCIgZGlzY29ubmVjdGluZyAgXCIgKyByZWFzb24pO1xyXG5cdFx0XHRcdGxvZ2luID0gZmFsc2U7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0aWYgKCFsb2dpbikge1xyXG5cdFx0XHRcdHNvY2tldC5qb2luKFwiYWRtaW5cIiwgZXJyID0+IHtcclxuXHRcdFx0XHRcdGlmICghZXJyKSB7XHJcblx0XHRcdFx0XHRcdHNvY2tldC5lbWl0KFwiam9pbmVkXCIsIFwiYWRtaW5cIik7XHJcblx0XHRcdFx0XHRcdHBhbmVsLl9kZWJ1ZyhgJHtzb2NrZXQuaWR9IGlzIGFkbWluLmApO1xyXG5cdFx0XHRcdFx0XHRsb2dpbiA9IHRydWU7XHJcblx0XHRcdFx0XHRcdGxhZG0gPSBzb2NrZXQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0c29ja2V0Lm9uKFwiZXJyb3JcIiwgZXJyID0+IHtcclxuXHRcdFx0XHRcdHBhbmVsLl9kZWJ1ZyhlcnIpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHNvY2tldC5vbihcImNvbW1hbmRcIiwgYXN5bmMgKG5hbWUsIC4uLnBhcmFtcykgPT4ge1xyXG5cdFx0XHRcdFx0cGFyYW1zID0gcGFyYW1zLm1hcChwYXJhbSA9PiBwYXJhbSA9PT0gXCIkcGFuZWwkXCIgPyBwYW5lbCA6IHBhcmFtKTtcclxuXHRcdFx0XHRcdHBhbmVsLl9kZWJ1ZyhgQ29tbWFuZDogICR7bmFtZX0gJHtwYXJhbXMuc2xpY2UoMCwgcGFyYW1zLmxlbmd0aCAtIDEpLmpvaW4oJyAnKX0gIC0tPmApO1xyXG5cdFx0XHRcdFx0bGV0IG91dCA9IGF3YWl0IHBhbmVsLmNtZHMuZmluZChjbWQgPT4gY21kLm5hbWUgPT09IG5hbWUpLmJvZHkoLi4ucGFyYW1zKTtcclxuXHRcdFx0XHRcdHBhbmVsLl9kZWJ1ZyhgICAke291dH1gKTtcclxuXHRcdFx0XHRcdHBhcmFtc1twYXJhbXMubGVuZ3RoIC0gMV0ob3V0KTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzb2NrZXQuZGlzY29ubmVjdCh0cnVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIGFkbWluO1xyXG5cdH0gLy9zZXR1cFxyXG5cclxufSAvL1NvY2tldFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU29ja2V0O1xyXG4iXX0=