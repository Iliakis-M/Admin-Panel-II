"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Classes = module.parent.exports.Classes, chalk = module.parent.exports.chalk;
const child_process_1 = require("child_process");
exports.command = new Classes.Command({
    name: "syscall",
    desc: "Perform a system call",
    exp: new RegExp('^' + Classes.Command.prefix + "s(ys)? .+$", "sim"),
    usage: eval("'" + Classes.Command.prefix + "'") + "sys[ command<String>]",
    _compl: eval("'" + Classes.Command.prefix + "'") + "sys ",
    _priority: 5,
    body: async function body(panel, command) {
        return new Promise((res, rej) => {
            command = command.split(' ');
            let child = child_process_1.spawn(command.shift(), command, {
                shell: true,
                windowsHide: true
            });
            panel._output.write('\n');
            child.stdout.pipe(panel._output);
            child.stderr.pipe(panel._error);
            child.once("close", (code) => {
                panel._output.write(chalk `\n{italic Process exited with code: {cyan ${code}}}\n\n`);
                res(Classes.Null);
            });
            child.on("error", rej);
        });
    },
    parse: function parse(line, panel) {
        return this.body(panel, line.split(' ').slice(1).join(' '));
    } //parse
});
exports.default = exports.command;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzY2FsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy9zeXNjYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFFYixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQzVDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFFckMsaURBQXNFO0FBRzNELFFBQUEsT0FBTyxHQUFlLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUNwRCxJQUFJLEVBQUUsU0FBUztJQUNmLElBQUksRUFBRSx1QkFBdUI7SUFDN0IsR0FBRyxFQUFFLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxZQUFZLEVBQUUsS0FBSyxDQUFDO0lBQ25FLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLHVCQUF1QjtJQUN6RSxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxNQUFNO0lBQ3pELFNBQVMsRUFBRSxDQUFDO0lBQ1osSUFBSSxFQUFFLEtBQUssVUFBVSxJQUFJLENBQUMsS0FBZSxFQUFFLE9BQTBCO1FBQ3BFLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUE0QixFQUFFLEdBQTRCLEVBQVEsRUFBRTtZQUN2RixPQUFPLEdBQVksT0FBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUV2QyxJQUFJLEtBQUssR0FBbUMscUJBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFO2dCQUMzRSxLQUFLLEVBQUUsSUFBSTtnQkFDWCxXQUFXLEVBQUUsSUFBSTthQUNqQixDQUFDLENBQUM7WUFFSCxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxQixLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2hDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBWSxFQUFRLEVBQUU7Z0JBQzFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQSw2Q0FBNkMsSUFBSSxRQUFRLENBQUMsQ0FBQztnQkFDcEYsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNuQixDQUFDLENBQUMsQ0FBQztZQUNILEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELEtBQUssRUFBRSxTQUFTLEtBQUssQ0FBQyxJQUFZLEVBQUUsS0FBZTtRQUNsRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUMsQ0FBQyxPQUFPO0NBQ1QsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsZUFBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IENsYXNzZXMgPSBtb2R1bGUucGFyZW50LmV4cG9ydHMuQ2xhc3Nlcyxcblx0Y2hhbGsgPSBtb2R1bGUucGFyZW50LmV4cG9ydHMuY2hhbGs7XG5cbmltcG9ydCB7IHNwYXduLCBDaGlsZFByb2Nlc3NXaXRob3V0TnVsbFN0cmVhbXMgfSBmcm9tIFwiY2hpbGRfcHJvY2Vzc1wiO1xuaW1wb3J0IHsgQ2xhc3NlcyBhcyBDVCB9IGZyb20gXCIuLi9DbGFzc2VzXCI7XG5cbmV4cG9ydCB2YXIgY29tbWFuZDogQ1QuQ29tbWFuZCA9IG5ldyBDbGFzc2VzLkNvbW1hbmQoe1xuXHRuYW1lOiBcInN5c2NhbGxcIixcblx0ZGVzYzogXCJQZXJmb3JtIGEgc3lzdGVtIGNhbGxcIixcblx0ZXhwOiBuZXcgUmVnRXhwKCdeJyArIENsYXNzZXMuQ29tbWFuZC5wcmVmaXggKyBcInMoeXMpPyAuKyRcIiwgXCJzaW1cIiksXG5cdHVzYWdlOiBldmFsKFwiJ1wiICsgQ2xhc3Nlcy5Db21tYW5kLnByZWZpeCArIFwiJ1wiKSArIFwic3lzWyBjb21tYW5kPFN0cmluZz5dXCIsXG5cdF9jb21wbDogZXZhbChcIidcIiArIENsYXNzZXMuQ29tbWFuZC5wcmVmaXggKyBcIidcIikgKyBcInN5cyBcIixcblx0X3ByaW9yaXR5OiA1LFxuXHRib2R5OiBhc3luYyBmdW5jdGlvbiBib2R5KHBhbmVsOiBDVC5QYW5lbCwgY29tbWFuZDogc3RyaW5nIHwgc3RyaW5nW10pOiBQcm9taXNlPHN5bWJvbD4ge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzOiAodmFsdWU6IHN5bWJvbCkgPT4gdm9pZCwgcmVqOiAocmVhc29uOiBFcnJvcikgPT4gdm9pZCk6IHZvaWQgPT4ge1xuXHRcdFx0Y29tbWFuZCA9ICg8c3RyaW5nPmNvbW1hbmQpLnNwbGl0KCcgJyk7XG5cblx0XHRcdGxldCBjaGlsZDogQ2hpbGRQcm9jZXNzV2l0aG91dE51bGxTdHJlYW1zID0gc3Bhd24oY29tbWFuZC5zaGlmdCgpLCBjb21tYW5kLCB7XG5cdFx0XHRcdHNoZWxsOiB0cnVlLFxuXHRcdFx0XHR3aW5kb3dzSGlkZTogdHJ1ZVxuXHRcdFx0fSk7XG5cblx0XHRcdHBhbmVsLl9vdXRwdXQud3JpdGUoJ1xcbicpO1xuXHRcdFx0Y2hpbGQuc3Rkb3V0LnBpcGUocGFuZWwuX291dHB1dCk7XG5cdFx0XHRjaGlsZC5zdGRlcnIucGlwZShwYW5lbC5fZXJyb3IpO1xuXHRcdFx0Y2hpbGQub25jZShcImNsb3NlXCIsIChjb2RlOiBudW1iZXIpOiB2b2lkID0+IHtcblx0XHRcdFx0cGFuZWwuX291dHB1dC53cml0ZShjaGFsa2BcXG57aXRhbGljIFByb2Nlc3MgZXhpdGVkIHdpdGggY29kZToge2N5YW4gJHtjb2RlfX19XFxuXFxuYCk7XG5cdFx0XHRcdHJlcyhDbGFzc2VzLk51bGwpO1xuXHRcdFx0fSk7XG5cdFx0XHRjaGlsZC5vbihcImVycm9yXCIsIHJlaik7XG5cdFx0fSk7XG5cdH0sIC8vYm9keVxuXHRwYXJzZTogZnVuY3Rpb24gcGFyc2UobGluZTogc3RyaW5nLCBwYW5lbDogQ1QuUGFuZWwpOiBQcm9taXNlPHN5bWJvbD4ge1xuXHRcdHJldHVybiB0aGlzLmJvZHkocGFuZWwsIGxpbmUuc3BsaXQoJyAnKS5zbGljZSgxKS5qb2luKCcgJykpO1xuXHR9IC8vcGFyc2Vcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjb21tYW5kO1xuIl19