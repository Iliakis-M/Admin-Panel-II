"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const http = tslib_1.__importStar(require("http"));
module.exports = {
    name: "auth",
    afters: [],
    befores: ["fix", "directory", "static", "end"],
    _fromFile: true,
    body: async function body(req, res, event) {
        if (!event.carriage._global.patherr) {
            res.setHeader("X-Content-Type-Options", "nosniff");
            res.setHeader("X-XSS-Protection", "1; mode=block");
            res.setHeader("Cache-Control", "private, no-store, max-age=3600, must-revalidate");
            res.setHeader("X-Frame-Options", "sameorigin");
            if (!req.headers["authorization"]) {
                res.writeHead(401, http.STATUS_CODES[401], {
                    "WWW-Authenticate": 'Basic realm="Access to the staging site", charset="UTF-8"'
                });
                event.server._debug(event.reqcntr, "(AUTH.TS) 401");
            }
            else {
                let challenge = Buffer.from(req.headers["authorization"].split(' ')[1], "base64").toString();
                if (challenge === event.server.data["auth"]) {
                    event.server._debug(event.reqcntr, "(AUTH.TS) PASS");
                    return event.pass();
                }
                else {
                    res.writeHead(403, http.STATUS_CODES[403]);
                    event.server._debug(event.reqcntr, "(AUTH.TS) 403");
                }
            }
        }
        else {
            res.writeHead(400, http.STATUS_CODES[400], { "warning": "bad root" });
        }
        res.end("ERR");
        return event.stop();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9taWRkbGV3YXJlcy9hdXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1EQUE2QjtBQUc3QixNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2hCLElBQUksRUFBRSxNQUFNO0lBQ1osTUFBTSxFQUFFLEVBQUc7SUFDWCxPQUFPLEVBQUUsQ0FBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUU7SUFDaEQsU0FBUyxFQUFFLElBQUk7SUFDZixJQUFJLEVBQUUsS0FBSyxVQUFVLElBQUksQ0FBQyxHQUF5QixFQUFFLEdBQXdCLEVBQUUsS0FBd0I7UUFDdEcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUVwQyxHQUFHLENBQUMsU0FBUyxDQUFDLHdCQUF3QixFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ25ELEdBQUcsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsZUFBZSxDQUFDLENBQUM7WUFDbkQsR0FBRyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsa0RBQWtELENBQUMsQ0FBQztZQUNuRixHQUFHLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxDQUFDO1lBRS9DLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxFQUFFO2dCQUNsQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUMxQyxrQkFBa0IsRUFBRSwyREFBMkQ7aUJBQy9FLENBQUMsQ0FBQztnQkFFSCxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxDQUFDO2FBQ3BEO2lCQUFNO2dCQUNOLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBRTdGLElBQUksU0FBUyxLQUFLLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUM1QyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUM7b0JBQ3JELE9BQU8sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUNwQjtxQkFBTTtvQkFDTixHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQzNDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7aUJBQ3BEO2FBQ0Q7U0FDRDthQUFNO1lBQ04sR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQ3RFO1FBRUQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNmLE9BQU8sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JCLENBQUM7Q0FDRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaHR0cCBmcm9tIFwiaHR0cFwiO1xyXG5pbXBvcnQgKiBhcyB2c2VydiBmcm9tIFwidmFsZS1zZXJ2ZXItaWlcIjtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdG5hbWU6IFwiYXV0aFwiLFxyXG5cdGFmdGVyczogWyBdLFxyXG5cdGJlZm9yZXM6IFsgXCJmaXhcIiwgXCJkaXJlY3RvcnlcIiwgXCJzdGF0aWNcIiwgXCJlbmRcIiBdLFxyXG5cdF9mcm9tRmlsZTogdHJ1ZSxcclxuXHRib2R5OiBhc3luYyBmdW5jdGlvbiBib2R5KHJlcTogaHR0cC5JbmNvbWluZ01lc3NhZ2UsIHJlczogaHR0cC5TZXJ2ZXJSZXNwb25zZSwgZXZlbnQ6IHZzZXJ2LkNsYXNzZXMuZXZ0KTogUHJvbWlzZTxib29sZWFuPiB7XHJcblx0XHRpZiAoIWV2ZW50LmNhcnJpYWdlLl9nbG9iYWwucGF0aGVycikge1xyXG5cclxuXHRcdFx0cmVzLnNldEhlYWRlcihcIlgtQ29udGVudC1UeXBlLU9wdGlvbnNcIiwgXCJub3NuaWZmXCIpO1xyXG5cdFx0XHRyZXMuc2V0SGVhZGVyKFwiWC1YU1MtUHJvdGVjdGlvblwiLCBcIjE7IG1vZGU9YmxvY2tcIik7XHJcblx0XHRcdHJlcy5zZXRIZWFkZXIoXCJDYWNoZS1Db250cm9sXCIsIFwicHJpdmF0ZSwgbm8tc3RvcmUsIG1heC1hZ2U9MzYwMCwgbXVzdC1yZXZhbGlkYXRlXCIpO1xyXG5cdFx0XHRyZXMuc2V0SGVhZGVyKFwiWC1GcmFtZS1PcHRpb25zXCIsIFwic2FtZW9yaWdpblwiKTtcclxuXHJcblx0XHRcdGlmICghcmVxLmhlYWRlcnNbXCJhdXRob3JpemF0aW9uXCJdKSB7XHJcblx0XHRcdFx0cmVzLndyaXRlSGVhZCg0MDEsIGh0dHAuU1RBVFVTX0NPREVTWzQwMV0sIHtcclxuXHRcdFx0XHRcdFwiV1dXLUF1dGhlbnRpY2F0ZVwiOiAnQmFzaWMgcmVhbG09XCJBY2Nlc3MgdG8gdGhlIHN0YWdpbmcgc2l0ZVwiLCBjaGFyc2V0PVwiVVRGLThcIidcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0ZXZlbnQuc2VydmVyLl9kZWJ1ZyhldmVudC5yZXFjbnRyLCBcIihBVVRILlRTKSA0MDFcIik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bGV0IGNoYWxsZW5nZSA9IEJ1ZmZlci5mcm9tKHJlcS5oZWFkZXJzW1wiYXV0aG9yaXphdGlvblwiXS5zcGxpdCgnICcpWzFdLCBcImJhc2U2NFwiKS50b1N0cmluZygpO1xyXG5cclxuXHRcdFx0XHRpZiAoY2hhbGxlbmdlID09PSBldmVudC5zZXJ2ZXIuZGF0YVtcImF1dGhcIl0pIHtcclxuXHRcdFx0XHRcdGV2ZW50LnNlcnZlci5fZGVidWcoZXZlbnQucmVxY250ciwgXCIoQVVUSC5UUykgUEFTU1wiKTtcclxuXHRcdFx0XHRcdHJldHVybiBldmVudC5wYXNzKCk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHJlcy53cml0ZUhlYWQoNDAzLCBodHRwLlNUQVRVU19DT0RFU1s0MDNdKTtcclxuXHRcdFx0XHRcdGV2ZW50LnNlcnZlci5fZGVidWcoZXZlbnQucmVxY250ciwgXCIoQVVUSC5UUykgNDAzXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmVzLndyaXRlSGVhZCg0MDAsIGh0dHAuU1RBVFVTX0NPREVTWzQwMF0sIHsgXCJ3YXJuaW5nXCI6IFwiYmFkIHJvb3RcIiB9KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXMuZW5kKFwiRVJSXCIpO1xyXG5cdFx0cmV0dXJuIGV2ZW50LnN0b3AoKTtcclxuXHR9XHJcbn07XHJcbiJdfQ==